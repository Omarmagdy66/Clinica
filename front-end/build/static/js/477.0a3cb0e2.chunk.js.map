{"version":3,"file":"static/js/477.0a3cb0e2.chunk.js","mappings":"oPAWA,MAyFA,EAzFsBA,KACpB,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,KAC5CC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,GAEzCG,GAAWC,EAAAA,EAAAA,OACX,QAAEC,IAAYC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,QAejDC,EAAAA,EAAAA,YAAU,KAbUC,WAClB,IACEP,GAASQ,EAAAA,EAAAA,KAAW,IACpB,MAAMC,QAAaC,EAAAA,EAAAA,GAAU,4BAC7BC,QAAQC,IAAIH,GAEZT,GAASQ,EAAAA,EAAAA,KAAW,IACpBZ,EAAiBa,EACnB,CAAE,MAAOI,GACPF,QAAQE,MAAM,gCAAiCA,EACjD,GAIAC,EAAa,GACZ,CAAChB,IAEJ,MAAMiB,EAAaC,KAAKC,KAAKtB,EAAcuB,OArBf,GAqCtBC,EAAyBxB,EAAcyB,MArCjB,GAsCzBtB,EAAc,GAtCW,EAuC1BA,GAGF,OACEuB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACNvB,GACCsB,EAAAA,EAAAA,KAACE,EAAAA,EAAO,KAERL,EAAAA,EAAAA,MAAA,WAASM,UAAU,0BAAyBJ,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,MAAIG,UAAU,eAAcJ,SAAC,uBAE5B5B,EAAcuB,OAAS,GACtBG,EAAAA,EAAAA,MAAA,OAAKM,UAAU,gBAAeJ,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBAIRC,EAAAA,EAAAA,KAAA,SAAAD,SACGJ,EAAuBS,KAAI,CAACC,EAAKC,KAChCT,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAhEQ,GAgEFzB,EAAc,GAA4BgC,EAAI,KACpDN,EAAAA,EAAAA,KAAA,MAAAD,SAAQ,OAAHM,QAAG,IAAHA,OAAG,EAAHA,EAAKE,YAFA,OAAHF,QAAG,IAAHA,OAAG,EAAHA,EAAKG,aAQpBR,EAAAA,EAAAA,KAAA,OAAKG,UAAU,aAAYJ,SA5CdU,MACvB,MAAMC,EAAQ,GACd,IAAK,IAAIJ,EAAI,EAAGA,GAAKf,EAAYe,IAC/BI,EAAMC,MACJX,EAAAA,EAAAA,KAAA,UAAgBY,QAASA,KAP7BrC,EAOoD+B,EAAG,EAAAP,SAAEO,GAAxCA,IAGjB,OAAOI,CAAK,EAqC2BD,SAG/BT,EAAAA,EAAAA,KAACa,EAAAA,EAAK,QAIZb,EAAAA,EAAAA,KAAA,OAAKG,UAAU,GAAGW,MAAO,CAACC,SAAU,QAASC,OAAQ,IAAKC,MAAO,QAAQlB,UAErEC,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,QAEV,C","sources":["pages/Notifications.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"../styles/notification.css\";\r\nimport Empty from \"../components/Empty\";\r\nimport Footer from \"../components/Footer\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport fetchData from \"../helper/apiCall\";\r\nimport { setLoading } from \"../redux/reducers/rootSlice.js\";\r\nimport Loading from \"../components/Loading\";\r\nimport \"../styles/user.css\";\r\n\r\nconst Notifications = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const notificationsPerPage =8;\r\n  const dispatch = useDispatch();\r\n  const { loading } = useSelector((state) => state.root);\r\n\r\n  const getAllNotif = async () => {\r\n    try {\r\n      dispatch(setLoading(true));\r\n      const temp = await fetchData(`/Doctor/Getnotifications`);\r\n      console.log(temp);\r\n      \r\n      dispatch(setLoading(false));\r\n      setNotifications(temp);\r\n    } catch (error) {\r\n      console.error(\"Error fetching notifications:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllNotif();\r\n  }, [currentPage]);\r\n\r\n  const totalPages = Math.ceil(notifications.length / notificationsPerPage);\r\n\r\n  const handlePageChange = (page) => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  const renderPagination = () => {\r\n    const pages = [];\r\n    for (let i = 1; i <= totalPages; i++) {\r\n      pages.push(\r\n        <button key={i} onClick={() => handlePageChange(i)}>{i}</button>\r\n      );\r\n    }\r\n    return pages;\r\n  };\r\n\r\n  const paginatedNotifications = notifications.slice(\r\n    (currentPage - 1) * notificationsPerPage,\r\n    currentPage * notificationsPerPage\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      {loading ? (\r\n        <Loading />\r\n      ) : (\r\n        <section className=\"container notif-section\">\r\n          <h2 className=\"page-heading\">Your Notifications</h2>\r\n\r\n          {notifications.length > 0 ? (\r\n            <div className=\"notifications\">\r\n              <table>\r\n                <thead>\r\n                  <tr>\r\n                    <th>S.No</th>\r\n                    <th>Content</th>\r\n               \r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {paginatedNotifications.map((ele, i) => (\r\n                    <tr key={ele?._id}>\r\n                      <td>{(currentPage - 1) * notificationsPerPage + i + 1}</td>\r\n                      <td>{ele?.message}</td>\r\n                     \r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n              <div className=\"pagination\">{renderPagination()}</div>\r\n            </div>\r\n          ) : (\r\n            <Empty />\r\n          )}\r\n        </section>\r\n      )}\r\n      <div className=\"\" style={{position: \"fixed\", bottom: \"0\", width: \"100%\"}}>\r\n\r\n          <Footer />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n"],"names":["Notifications","notifications","setNotifications","useState","currentPage","setCurrentPage","dispatch","useDispatch","loading","useSelector","state","root","useEffect","async","setLoading","temp","fetchData","console","log","error","getAllNotif","totalPages","Math","ceil","length","paginatedNotifications","slice","_jsxs","_Fragment","children","_jsx","Navbar","Loading","className","map","ele","i","message","_id","renderPagination","pages","push","onClick","Empty","style","position","bottom","width","Footer"],"sourceRoot":""}