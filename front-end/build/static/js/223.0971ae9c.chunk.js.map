{"version":3,"file":"static/js/223.0971ae9c.chunk.js","mappings":"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","sources":["pages/ImageModels.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../styles/ImageModels.css';\r\n\r\nconst models = [\r\n  {\r\n    id: 1,\r\n    name: \"Brain Tumor Detection\",\r\n    description: \"Detect brain tumors from MRI scans\",\r\n    outputType: \"image+text\",\r\n    endpoint: \"https://your-actual-api-domain.com/brain-tumor\"\r\n  },\r\n  {\r\n    id: 2,\r\n    name: \"Dental Disease Detection\",\r\n    description: \"Identify dental problems from X-rays\",\r\n    outputType: \"image+text\",\r\n    endpoint: \"https://your-actual-api-domain.com/dental\"\r\n  },\r\n  {\r\n    id: 3,\r\n    name: \"Chest X-Ray Analysis\",\r\n    description: \"Analyze chest X-rays for various conditions\",\r\n    outputType: \"text\",\r\n    endpoint: \"https://your-actual-api-domain.com/chest-xray\"\r\n  }\r\n];\r\n\r\nconst ImageModels = () => {\r\n  const [selectedModel, setSelectedModel] = useState(null);\r\n  const [selectedFile, setSelectedFile] = useState(null);\r\n  const [previewUrl, setPreviewUrl] = useState('');\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\r\n  const [result, setResult] = useState(null);\r\n  const fileInputRef = useRef();\r\n\r\n  const handleModelSelect = (model) => {\r\n    setSelectedModel(model);\r\n  };\r\n\r\n  const handleFileSelect = (file) => {\r\n    if (file) {\r\n      setSelectedFile(file);\r\n      const reader = new FileReader();\r\n      reader.onload = () => setPreviewUrl(reader.result);\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    const file = e.dataTransfer.files[0];\r\n    if (file && file.type.startsWith('image/')) {\r\n      handleFileSelect(file);\r\n    }\r\n  };\r\n\r\n  const handleAnalysis = async () => {\r\n    if (!selectedModel || !selectedFile) return;\r\n\r\n    setIsAnalyzing(true);\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('image', selectedFile);\r\n      \r\n      const response = await fetch(selectedModel.endpoint, {\r\n        method: 'POST',\r\n        body: formData,\r\n        headers: {\r\n          'Accept': 'application/json',\r\n        }\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Error: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      \r\n      switch(selectedModel.id) {\r\n        case 1: // Brain Tumor\r\n          setResult({\r\n            image: data.segmentedImage || previewUrl,\r\n            text: `Tumor Detection Result: ${data.diagnosis}\\nConfidence: ${data.confidence}%`\r\n          });\r\n          break;\r\n          \r\n        case 2: // Dental\r\n          setResult({\r\n            image: data.annotatedImage || previewUrl,\r\n            text: `Dental Analysis:\\n${data.findings.join('\\n')}`\r\n          });\r\n          break;\r\n          \r\n        case 3: // Chest X-Ray\r\n          setResult({\r\n            image: previewUrl,\r\n            text: `Analysis Results:\\n${data.diagnosis}\\nRecommendations: ${data.recommendations}`\r\n          });\r\n          break;\r\n          \r\n        default:\r\n          setResult({\r\n            image: data.resultImage || previewUrl,\r\n            text: data.analysisResult || 'Analysis complete'\r\n          });\r\n      }\r\n    } catch (error) {\r\n      console.error('Analysis Error:', error);\r\n      alert(`Error analyzing image: ${error.message}`);\r\n    } finally {\r\n      setIsAnalyzing(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handlePaste = (e) => {\r\n      const items = e.clipboardData.items;\r\n      for (let i = 0; i < items.length; i++) {\r\n        if (items[i].type.startsWith('image/')) {\r\n          const file = items[i].getAsFile();\r\n          handleFileSelect(file);\r\n          break;\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('paste', handlePaste);\r\n    return () => document.removeEventListener('paste', handlePaste);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"model-page\">\r\n      <h1>Medical Image Analysis</h1>\r\n      <div className=\"model-container\">\r\n        <div className=\"model-selection\">\r\n          <h2>Select Model</h2>\r\n          <div className=\"model-grid\">\r\n            {models.map(model => (\r\n              <div\r\n                key={model.id}\r\n                className={`model-card ${selectedModel?.id === model.id ? 'selected' : ''}`}\r\n                onClick={() => handleModelSelect(model)}\r\n              >\r\n                <h3>{model.name}</h3>\r\n                <p>{model.description}</p>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"image-upload-section\">\r\n          <div\r\n            className=\"drop-zone\"\r\n            onDragOver={(e) => e.preventDefault()}\r\n            onDrop={handleDrop}\r\n            onClick={() => fileInputRef.current?.click()}\r\n          >\r\n            {!previewUrl ? (\r\n              <div className=\"upload-prompt\">\r\n                <svg className=\"upload-icon\" viewBox=\"0 0 24 24\">\r\n                  <path d=\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z\"/>\r\n                </svg>\r\n                <p>Drag and drop an image or click to browse</p>\r\n              </div>\r\n            ) : (\r\n              <img src={previewUrl} alt=\"Preview\" className=\"preview-image\" />\r\n            )}\r\n            <input\r\n              type=\"file\"\r\n              ref={fileInputRef}\r\n              accept=\"image/*\"\r\n              style={{ display: 'none' }}\r\n              onChange={(e) => handleFileSelect(e.target.files[0])}\r\n            />\r\n          </div>\r\n\r\n          <button\r\n            className=\"analyze-button\"\r\n            disabled={!selectedModel || !selectedFile || isAnalyzing}\r\n            onClick={handleAnalysis}\r\n          >\r\n            {isAnalyzing ? 'Processing...' : 'Analyze Image'}\r\n          </button>\r\n        </div>\r\n\r\n        {result && (\r\n          <div className=\"result-section\">\r\n            <h2>Analysis Result</h2>\r\n            <img src={result.image} alt=\"Result\" className=\"result-image\" />\r\n            <p className=\"result-text\">{result.text}</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageModels;\r\n"],"names":["models","id","name","description","outputType","endpoint","ImageModels","selectedModel","setSelectedModel","useState","selectedFile","setSelectedFile","previewUrl","setPreviewUrl","isAnalyzing","setIsAnalyzing","result","setResult","fileInputRef","useRef","handleFileSelect","file","reader","FileReader","onload","readAsDataURL","useEffect","handlePaste","e","items","clipboardData","i","length","type","startsWith","getAsFile","document","addEventListener","removeEventListener","_jsxs","className","children","_jsx","map","model","onClick","handleModelSelect","onDragOver","preventDefault","onDrop","dataTransfer","files","_fileInputRef$current","current","click","src","alt","viewBox","d","ref","accept","style","display","onChange","target","disabled","async","formData","FormData","append","response","fetch","method","body","headers","ok","Error","status","data","json","image","segmentedImage","text","diagnosis","confidence","annotatedImage","findings","join","recommendations","resultImage","analysisResult","error","console","alert","message"],"sourceRoot":""}