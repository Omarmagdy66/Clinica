{"version":3,"file":"static/js/139.f4613e57.chunk.js","mappings":"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","sources":["pages/Appointments.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Empty from \"../components/Empty\";\nimport Footer from \"../components/Footer\";\nimport Navbar from \"../components/Navbar\";\nimport fetchData from \"../helper/apiCall\";\nimport { setLoading } from \"../redux/reducers/rootSlice.js\";\nimport Loading from \"../components/Loading\";\nimport { toast } from \"react-hot-toast\";\nimport jwt_decode from \"jwt-decode\";\nimport axios from \"axios\";\nimport \"../styles/user.css\";\nimport \"../styles/appointments.css\"\nimport moment from \"moment\";\n\nconst Appointments = () => {\n  const [appointments, setAppointments] = useState([]);\n  const [filteredAppointments, setFilteredAppointments] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const PerPage = 5;\n  const [searchDate, setSearchDate] = useState(\"\");\n  const dispatch = useDispatch();\n  const { loading } = useSelector((state) => state.root);\n  const { id } = jwt_decode(localStorage.getItem(\"token\"));\n\n  const getAllAppoint = async () => {\n    try {\n      dispatch(setLoading(true));\n      const temp = await fetchData(\n        `/Appointment/GetAppointmentsForDoctor`\n      );\n      console.log(temp);\n\n      setAppointments(temp);\n      setFilteredAppointments(temp);\n    } catch (error) {\n      console.error(\"Error fetching appointments:\", error);\n      toast.error(\"No Appointments Founded\");\n    } finally {\n      dispatch(setLoading(false)); // Ensure loading is set to false regardless of success or failure\n    }\n  };\n  useEffect(() => {\n    getAllAppoint();\n  }, []);\n\n  const handleSearchDateChange = (e) => {\n    setSearchDate(e.target.value);\n  };\n\n  useEffect(() => {\n    const filterAppointmentsByDate = () => {\n      if (!searchDate) {\n        setFilteredAppointments(appointments);\n        return;\n      }\n\n      const filtered = appointments.filter(appointment =>\n        moment(appointment.appointmentDate).format('YYYY-MM-DD') === searchDate\n      );\n      setFilteredAppointments(filtered);\n    };\n\n    filterAppointmentsByDate();\n  }, [appointments, searchDate]);\n\n  const totalPages = Math.ceil(filteredAppointments.length / PerPage);\n\n  const handlePageChange = (page) => {\n    setCurrentPage(page);\n  };\n\n  const renderPagination = () => {\n    const pages = [];\n    for (let i = 1; i <= totalPages; i++) {\n      pages.push(\n        <button key={i} onClick={() => handlePageChange(i)}>\n          {i}\n        </button>\n      );\n    }\n    return pages;\n  };\n\n  const paginatedAppointments = filteredAppointments.slice(\n    (currentPage - 1) * PerPage,\n    currentPage * PerPage\n  );\n\n  const completeAppointment = async (appointment) => {\n    if (appointment.status === 'Cancelld') {\n      toast.error(\"This appointment has been cancelled before!\"); // More informative message\n    }\n\n    if (appointment.status !== 'Cancelld') {\n      try {\n        await axios.put(\n          `Appointment/EditAppointmentStatus?id=${appointment.id}`,\n          {\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n            },\n          }\n        );\n        toast.success(\"Appointment completed successfully.\");\n        getAllAppoint(); // Refetch appointments after completing one\n      } catch (error) {\n        console.error(\"Error completing appointment:\", error);\n        toast.error(\"Failed to complete appointment. Please try again.\");\n        // TODO: Add better error handling, e.g., show a more specific error message, maybe with details from error.response\n      }\n    }\n  };\n\n  const fixDate = (dateString) => {\n    const date = new Date(dateString);\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    const formattedDate = date.toLocaleDateString('en-US', options)\n    return formattedDate\n  }\n\n  return (\n    <>\n      <Navbar />\n      {loading ? (\n        <Loading />\n      ) : (\n        <section className=\"container notif-section\">\n          <h2 className=\"page-heading\">Your Appointments</h2>\n\n          {/* Search Input */}\n          <div className=\"search-input\">\n            <label htmlFor=\"searchDate\">Search by Appointment Date:</label>\n            <input\n              type=\"date\"\n              className=\"form-input\"\n              id=\"searchDate\"\n              value={searchDate}\n              onChange={handleSearchDateChange}\n            />\n          </div>\n\n          {filteredAppointments.length > 0 ? (\n            <div className=\"appointments\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>S.No</th>\n                    <th>P Name</th>\n                    <th>P Email</th>\n                    <th>P Mobile No.</th>\n                    <th>time Slot</th>\n                    <th>Appointment Date</th>\n                    <th>Status</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {paginatedAppointments.map((appointment, index) => (\n                    <tr key={appointment._id}>\n                      <td>{(currentPage - 1) * PerPage + index + 1}</td>\n                      <td>{`${appointment.patientNameIN}`}</td>\n                      <td>{`${appointment.patientEmailIN}`}</td>\n                      <td>{appointment.patientNumberIN}</td>\n                      <td>{appointment.timeSlot}</td>\n                      <td>{fixDate(appointment.appointmentDate)}</td>\n                      <td>{appointment.status}</td>\n                      <td>\n                        <button\n                          className=\"btn user-btn complete-btn\"\n                          onClick={() => completeAppointment(appointment)}\n                          disabled={appointment.status === \"Completed\"}\n                        >\n                          Complete\n                        </button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n              <div className=\"pagination\">{renderPagination()}</div>\n            </div>\n          ) : (\n            <Empty message=\"No appointments found.\" />\n          )}\n        </section>\n      )}\n      <div className=\"\" /* style={{position: \"fixed\", bottom: \"0\", width: \"100%\"}} */>\n        <Footer />\n      </div>\n    </>\n  );\n};\n\nexport default Appointments;"],"names":["Appointments","appointments","setAppointments","useState","filteredAppointments","setFilteredAppointments","currentPage","setCurrentPage","searchDate","setSearchDate","dispatch","useDispatch","loading","useSelector","state","root","id","jwt_decode","localStorage","getItem","getAllAppoint","async","setLoading","temp","fetchData","console","log","error","toast","useEffect","filterAppointmentsByDate","filtered","filter","appointment","moment","appointmentDate","format","totalPages","Math","ceil","length","paginatedAppointments","slice","_jsxs","_Fragment","children","_jsx","Navbar","Loading","className","htmlFor","type","value","onChange","e","target","map","index","patientNameIN","patientEmailIN","patientNumberIN","timeSlot","dateString","Date","toLocaleDateString","year","month","day","status","onClick","axios","put","headers","Authorization","success","completeAppointment","disabled","_id","renderPagination","pages","i","push","Empty","message","Footer"],"sourceRoot":""}